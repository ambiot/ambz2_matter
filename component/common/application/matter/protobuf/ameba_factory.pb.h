/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_AMEBA_FACTORY_PB_H_INCLUDED
#define PB_AMEBA_FACTORY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _BytesField { 
    pb_callback_t value; 
    int32_t length; 
} BytesField;

typedef struct _CommissionableDataProvider { 
    int32_t passcode; 
    int32_t discriminator; 
    int32_t spake2_it; 
    bool has_spake2_salt;
    BytesField spake2_salt; 
    bool has_spake2_verifier;
    BytesField spake2_verifier; 
} CommissionableDataProvider;

typedef struct _DeviceAttestationCredentialsProvider { 
    bool has_dac_cert;
    BytesField dac_cert; 
    bool has_dac_key;
    BytesField dac_key; 
    bool has_pai_cert;
    BytesField pai_cert; 
    bool has_cd;
    BytesField cd; 
} DeviceAttestationCredentialsProvider;

typedef struct _DeviceInstanceInfoProvider { 
    int32_t vendor_id; 
    bool has_vendor_name;
    BytesField vendor_name; 
    int32_t product_id; 
    bool has_product_name;
    BytesField product_name; 
    int32_t hw_ver; 
    bool has_hw_ver_string;
    BytesField hw_ver_string; 
    bool has_mfg_date;
    BytesField mfg_date; 
    bool has_serial_num;
    BytesField serial_num; 
    bool has_rd_id_uid;
    BytesField rd_id_uid; 
} DeviceInstanceInfoProvider;

typedef struct _FactoryDataProvider { 
    bool has_cdata;
    CommissionableDataProvider cdata; 
    bool has_dac;
    DeviceAttestationCredentialsProvider dac; 
    bool has_dii;
    DeviceInstanceInfoProvider dii; 
} FactoryDataProvider;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define BytesField_init_default                  {{{NULL}, NULL}, 0}
#define CommissionableDataProvider_init_default  {0, 0, 0, false, BytesField_init_default, false, BytesField_init_default}
#define DeviceAttestationCredentialsProvider_init_default {false, BytesField_init_default, false, BytesField_init_default, false, BytesField_init_default, false, BytesField_init_default}
#define DeviceInstanceInfoProvider_init_default  {0, false, BytesField_init_default, 0, false, BytesField_init_default, 0, false, BytesField_init_default, false, BytesField_init_default, false, BytesField_init_default, false, BytesField_init_default}
#define FactoryDataProvider_init_default         {false, CommissionableDataProvider_init_default, false, DeviceAttestationCredentialsProvider_init_default, false, DeviceInstanceInfoProvider_init_default}
#define BytesField_init_zero                     {{{NULL}, NULL}, 0}
#define CommissionableDataProvider_init_zero     {0, 0, 0, false, BytesField_init_zero, false, BytesField_init_zero}
#define DeviceAttestationCredentialsProvider_init_zero {false, BytesField_init_zero, false, BytesField_init_zero, false, BytesField_init_zero, false, BytesField_init_zero}
#define DeviceInstanceInfoProvider_init_zero     {0, false, BytesField_init_zero, 0, false, BytesField_init_zero, 0, false, BytesField_init_zero, false, BytesField_init_zero, false, BytesField_init_zero, false, BytesField_init_zero}
#define FactoryDataProvider_init_zero            {false, CommissionableDataProvider_init_zero, false, DeviceAttestationCredentialsProvider_init_zero, false, DeviceInstanceInfoProvider_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define BytesField_value_tag                     1
#define BytesField_length_tag                    2
#define CommissionableDataProvider_passcode_tag  1
#define CommissionableDataProvider_discriminator_tag 2
#define CommissionableDataProvider_spake2_it_tag 3
#define CommissionableDataProvider_spake2_salt_tag 4
#define CommissionableDataProvider_spake2_verifier_tag 5
#define DeviceAttestationCredentialsProvider_dac_cert_tag 1
#define DeviceAttestationCredentialsProvider_dac_key_tag 2
#define DeviceAttestationCredentialsProvider_pai_cert_tag 3
#define DeviceAttestationCredentialsProvider_cd_tag 4
#define DeviceInstanceInfoProvider_vendor_id_tag 1
#define DeviceInstanceInfoProvider_vendor_name_tag 2
#define DeviceInstanceInfoProvider_product_id_tag 3
#define DeviceInstanceInfoProvider_product_name_tag 4
#define DeviceInstanceInfoProvider_hw_ver_tag    5
#define DeviceInstanceInfoProvider_hw_ver_string_tag 6
#define DeviceInstanceInfoProvider_mfg_date_tag  7
#define DeviceInstanceInfoProvider_serial_num_tag 8
#define DeviceInstanceInfoProvider_rd_id_uid_tag 9
#define FactoryDataProvider_cdata_tag            1
#define FactoryDataProvider_dac_tag              2
#define FactoryDataProvider_dii_tag              3

/* Struct field encoding specification for nanopb */
#define BytesField_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    value,             1) \
X(a, STATIC,   SINGULAR, INT32,    length,            2)
#define BytesField_CALLBACK pb_default_field_callback
#define BytesField_DEFAULT NULL

#define CommissionableDataProvider_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    passcode,          1) \
X(a, STATIC,   SINGULAR, INT32,    discriminator,     2) \
X(a, STATIC,   SINGULAR, INT32,    spake2_it,         3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  spake2_salt,       4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  spake2_verifier,   5)
#define CommissionableDataProvider_CALLBACK NULL
#define CommissionableDataProvider_DEFAULT NULL
#define CommissionableDataProvider_spake2_salt_MSGTYPE BytesField
#define CommissionableDataProvider_spake2_verifier_MSGTYPE BytesField

#define DeviceAttestationCredentialsProvider_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dac_cert,          1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dac_key,           2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pai_cert,          3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cd,                4)
#define DeviceAttestationCredentialsProvider_CALLBACK NULL
#define DeviceAttestationCredentialsProvider_DEFAULT NULL
#define DeviceAttestationCredentialsProvider_dac_cert_MSGTYPE BytesField
#define DeviceAttestationCredentialsProvider_dac_key_MSGTYPE BytesField
#define DeviceAttestationCredentialsProvider_pai_cert_MSGTYPE BytesField
#define DeviceAttestationCredentialsProvider_cd_MSGTYPE BytesField

#define DeviceInstanceInfoProvider_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    vendor_id,         1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  vendor_name,       2) \
X(a, STATIC,   SINGULAR, INT32,    product_id,        3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  product_name,      4) \
X(a, STATIC,   SINGULAR, INT32,    hw_ver,            5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hw_ver_string,     6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  mfg_date,          7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  serial_num,        8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rd_id_uid,         9)
#define DeviceInstanceInfoProvider_CALLBACK NULL
#define DeviceInstanceInfoProvider_DEFAULT NULL
#define DeviceInstanceInfoProvider_vendor_name_MSGTYPE BytesField
#define DeviceInstanceInfoProvider_product_name_MSGTYPE BytesField
#define DeviceInstanceInfoProvider_hw_ver_string_MSGTYPE BytesField
#define DeviceInstanceInfoProvider_mfg_date_MSGTYPE BytesField
#define DeviceInstanceInfoProvider_serial_num_MSGTYPE BytesField
#define DeviceInstanceInfoProvider_rd_id_uid_MSGTYPE BytesField

#define FactoryDataProvider_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cdata,             1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dac,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dii,               3)
#define FactoryDataProvider_CALLBACK NULL
#define FactoryDataProvider_DEFAULT NULL
#define FactoryDataProvider_cdata_MSGTYPE CommissionableDataProvider
#define FactoryDataProvider_dac_MSGTYPE DeviceAttestationCredentialsProvider
#define FactoryDataProvider_dii_MSGTYPE DeviceInstanceInfoProvider

extern const pb_msgdesc_t BytesField_msg;
extern const pb_msgdesc_t CommissionableDataProvider_msg;
extern const pb_msgdesc_t DeviceAttestationCredentialsProvider_msg;
extern const pb_msgdesc_t DeviceInstanceInfoProvider_msg;
extern const pb_msgdesc_t FactoryDataProvider_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define BytesField_fields &BytesField_msg
#define CommissionableDataProvider_fields &CommissionableDataProvider_msg
#define DeviceAttestationCredentialsProvider_fields &DeviceAttestationCredentialsProvider_msg
#define DeviceInstanceInfoProvider_fields &DeviceInstanceInfoProvider_msg
#define FactoryDataProvider_fields &FactoryDataProvider_msg

/* Maximum encoded size of messages (where known) */
/* BytesField_size depends on runtime parameters */
/* CommissionableDataProvider_size depends on runtime parameters */
/* DeviceAttestationCredentialsProvider_size depends on runtime parameters */
/* DeviceInstanceInfoProvider_size depends on runtime parameters */
/* FactoryDataProvider_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
